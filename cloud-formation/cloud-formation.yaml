AWSTemplateFormatVersion: '2010-09-09'
Description: CloudFormation template to deploy TripMateAI application with dynamic secrets and API Gateway endpoints.

Parameters:
  KeyName:
    Type: AWS::EC2::KeyPair::KeyName
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instances

Resources:
  # VPC
  TripMateVPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/16
      EnableDnsSupport: true
      EnableDnsHostnames: true
      Tags:
        - Key: Name
          Value: TripMateVPC

  # Internet Gateway
  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: TripMateInternetGateway

  AttachGateway:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      VpcId: !Ref TripMateVPC
      InternetGatewayId: !Ref InternetGateway

  # Public Subnet
  PublicSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TripMateVPC
      CidrBlock: 10.0.1.0/24
      MapPublicIpOnLaunch: true
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: TripMatePublicSubnet

  # Private Subnet
  PrivateSubnet:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref TripMateVPC
      CidrBlock: 10.0.2.0/24
      MapPublicIpOnLaunch: false
      AvailabilityZone: !Select [0, !GetAZs '']
      Tags:
        - Key: Name
          Value: TripMatePrivateSubnet

  # NAT Gateway EIP
  NatEIP:
    Type: AWS::EC2::EIP
    Properties:
      Domain: vpc

  # NAT Gateway
  NatGateway:
    Type: AWS::EC2::NatGateway
    Properties:
      AllocationId: !GetAtt NatEIP.AllocationId
      SubnetId: !Ref PublicSubnet
      Tags:
        - Key: Name
          Value: TripMateNatGateway

  # Route Tables
  PublicRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TripMateVPC
      Tags:
        - Key: Name
          Value: TripMatePublicRouteTable

  PrivateRouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref TripMateVPC
      Tags:
        - Key: Name
          Value: TripMatePrivateRouteTable

  # Routes
  PublicRoute:
    Type: AWS::EC2::Route
    DependsOn: AttachGateway
    Properties:
      RouteTableId: !Ref PublicRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  PrivateRoute:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref PrivateRouteTable
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NatGateway

  # Subnet Route Table Associations
  PublicSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PublicSubnet
      RouteTableId: !Ref PublicRouteTable

  PrivateSubnetRouteTableAssociation:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref PrivateSubnet
      RouteTableId: !Ref PrivateRouteTable

  # Security Groups
  FrontendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP and SSH access to the frontend instance
      VpcId: !Ref TripMateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0 
        - IpProtocol: tcp
          FromPort: 8080
          ToPort: 8080
          CidrIp: 0.0.0.0/0 # Allow HTTP traffic to the frontend
        - IpProtocol: tcp
          FromPort: 443
          ToPort: 443
          CidrIp: 0.0.0.0/0
      Tags:
        - Key: Name
          Value: TripMateFrontendSG

  BackendSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow traffic from the frontend instance and SSH access
      VpcId: !Ref TripMateVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 3000
          ToPort: 3000
          SourceSecurityGroupId: !Ref FrontendSecurityGroup  # Allow frontend instance to access backend
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          SourceSecurityGroupId: !Ref FrontendSecurityGroup  # Allow SSH from the frontend instance
      Tags:
        - Key: Name
          Value: TripMateBackendSG



  # Cognito User Pool
  CognitoUserPool:
    Type: AWS::Cognito::UserPool
    Properties:
      UserPoolName: TripMateUserPool
      AutoVerifiedAttributes:
        - email
      UsernameAttributes:
        - email
      Policies:
        PasswordPolicy:
          MinimumLength: 8
          RequireUppercase: true
          RequireLowercase: true
          RequireNumbers: true
          RequireSymbols: true

  # Cognito User Pool Client
  CognitoUserPoolClient:
    Type: AWS::Cognito::UserPoolClient
    Properties:
      ClientName: TripMateUserPoolClient
      UserPoolId: !Ref CognitoUserPool
      GenerateSecret: true
      AllowedOAuthFlowsUserPoolClient: true
      AllowedOAuthFlows:
        - code
        - implicit
      AllowedOAuthScopes:
        - email
        - openid
        - aws.cognito.signin.user.admin
      CallbackURLs:
        - 'https://localhost/'  # Update as needed
      LogoutURLs:
        - 'https://localhost/'  # Update as needed

  # S3 Bucket
  TripItineraryBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub 'trip-itinerary-${AWS::AccountId}-${AWS::Region}'
      AccessControl: Private

  # DynamoDB Table
  TripRecordsTable:
    Type: AWS::DynamoDB::Table
    Properties:
      TableName: 'TripRecords'
      AttributeDefinitions:
        - AttributeName: 'TripId'
          AttributeType: 'S'
      KeySchema:
        - AttributeName: 'TripId'
          KeyType: 'HASH'
      BillingMode: PAY_PER_REQUEST

  # Secrets Manager Secret for AWS Secrets
  TripMateAWSSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'trip_mate/awssecrets'
      Description: 'AWS secrets for TripMate application'
      SecretString: !Sub |
        {
          "REGION": "${AWS::Region}",
          "USER_POOL_ID": "${CognitoUserPool}",
          "CLIENT_ID": "${CognitoUserPoolClient}",
          "CLIENT_SECRET": "${CognitoUserPoolClient.ClientSecret}",
          "BUCKET_NAME": "${TripItineraryBucket}"
        }

  # Secrets Manager Secret for GCP Secrets
  TripMateGCPSecrets:
    Type: AWS::SecretsManager::Secret
    Properties:
      Name: 'trip_mate/gcpsecrets'
      Description: 'GCP service account secret key for TripMate application'
      SecretString: !Sub |
        {
          "type": "service_account",
          "project_id": "csci-5410-442522",
          "private_key_id": "5d8e4d397150aaf78daf97bff4d8435c190735a2",
          "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCqiKjgeXlaq77Q\nhil4dsV16grfL1cOnxjKdn7+toZzsSS6bmaclTZqh+Ee07zUJLaZS1jPrlotxuL0\ndZtLXIWoZyU9fSb+AHyWJ6QVenTtKSPN/5MdU7YztT333W6mAllxRvtcpZ0gC2+O\naxb9o9y0akf6n305dQ3U7w03zxOs4puWY7MZIjw/znX7+tpP0ldVbgtblXY7uGEv\nMDj2vf8Tb94WFhC/K0sn34v9sApif8jjxnrO/FY9nr/q77EcUNlZ1AOjTcXNMn/k\nE5Xx08vaW8J7QjOC0f5Dm1iIjqlwwpUNx04+e0CGjAdLaZpgEDGhK1El/TjfOldN\n4ySalbm/AgMBAAECggEAEGRVc0pJ32zNySZ0OweToGtwQxa+VAH39JIiT+KElv9K\ni/8LrvZqxh+shHWO24dx49dJwKC+O1M4Qo5BcKOCl3bergPnKRgr4ZUK4SOltJw1\nPFpaLkH7LAo6XCZ1OdDU/x33EGc87LUcsoBZs+S51L+4jn8hHtJBE5ws1ZX6iq4P\nYOypY1atYcQo7MNga8o6jAqqr/I5KMv4iO226sT1DMIzoBPLlIYiUNaNmrj759Op\nvoygVQEK8uAV8xYldUrJXt7eCTZfm9+yctg5e+EHQAemIPySkzWpixrmP1XSNPb5\nhcrN/LNqXcQZvoiTeKFOWffVZ7h0kJbABKB4EAjvOQKBgQDUpLCJ2nYV3YnUhqo8\nUyLe/lGPha8CdreDHtRz0QqEiHWHnwxRkva0831BdIWldlXgUN/HVlnuLjL5YVsY\nEjEOr2Jd5G1PymDtnppqt1EFE8FqLZcj43txE4yiZkE8B2fHcjltkNps6qdmfHwT\nehI7qSoxsBcRpKK1adUD5ROQmQKBgQDNTfzI5Epiy3VOs6lx07IeQT0/xI0lRrHa\neLUEix5iefC2E0EcHpU7EyCAFe67cuWNX4oxcbXvXkcluav7tiKw0ES0mHo5AMts\nAkVnH/50EyYiOpSV64ZkhLWESCI/ZcVq989QZGwtWdZNg9X6GWNVWw1mmG1Dc0UN\nI9EkfPscFwKBgCtlnP3VTuoxd1KfVRjQoro9zulqkAgBsHwbC6LDU9EuhEX0aLAx\nPRY65yI3pJrbJrWL68+jyOC6Hv8UJmIoPEjR9FJTLxfsppF4H+2NkgRmPr/ro//Y\nCjZOlhICqmeU31It9phsypcV4Koi17Ol4xi38nuHg32/StGZUrbjxnVpAoGASYBd\nOvL4aqxawCV0SYs33rsOmZDd03We4Q+MBydjZnAvrI/yJIYSeUbcwN6ZTMTSyC1n\nRVJnh14ibLAvkXtgqhq2Lk3UnCnbqjyZ6lS6/YWJhoGghpf+0mfssII+uKHP7v7v\nWuHJFOdv4OqNJfAG7x0dDBkQLTDMjOrAyqZwJFsCgYEApJZg3jBJuw/Kv0QS2A3L\niyqUUjOUSp1R+4td3f1mY9XPJWGxynjrmjt/9QGx/IWFaCJi6WieZkK0FLxW/0EU\n3Yz663uNTJ0LCwcPAf8816O3H7N/056SRFvQiPYexCzNHs812HgkBpkBoejtRJV7\nrlO71xrGGFTY7PJVN4VYopM=\n-----END PRIVATE KEY-----\n",
          "client_email": "vertexai@csci-5410-442522.iam.gserviceaccount.com",
          "client_id": "106152084513626917135",
          "auth_uri": "https://accounts.google.com/o/oauth2/auth",
          "token_uri": "https://oauth2.googleapis.com/token",
          "auth_provider_x509_cert_url": "https://www.googleapis.com/oauth2/v1/certs",
          "client_x509_cert_url": "https://www.googleapis.com/robot/v1/metadata/x509/vertexai%40csci-5410-442522.iam.gserviceaccount.com",
          "universe_domain": "googleapis.com"
        }


  # Lambda Functions
  FetchAWSSecretsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'FetchAWSSecretsLambda-${AWS::StackName}'
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import json

          def lambda_handler(event, context):
              secret_name = "trip_mate/awssecrets"
              region_name = "us-east-1"

              # Create a Secrets Manager client
              client = boto3.client("secretsmanager", region_name=region_name)

              try:
                  # Fetch the secret value
                  response = client.get_secret_value(SecretId=secret_name)
                  secret = json.loads(response["SecretString"])
                  
                  return {
                      "statusCode": 200,
                      "body": json.dumps({
                          "message": "AWS Secret fetched successfully",
                          "secret": secret
                      })
                  }
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": json.dumps({"error": str(e)})
                  }

  FetchGCPSecretsLambda:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: !Sub 'FetchGCPSecretsLambda-${AWS::StackName}'
      Handler: index.lambda_handler
      Role: !Sub 'arn:aws:iam::${AWS::AccountId}:role/LabRole'
      Runtime: python3.9
      Code:
        ZipFile: |
          import boto3
          import json

          def lambda_handler(event, context):
              secret_name = "trip_mate/gcpsecrets"
              region_name = "us-east-1"

              # Create a Secrets Manager client
              client = boto3.client("secretsmanager", region_name=region_name)

              try:
                  # Fetch the secret value
                  response = client.get_secret_value(SecretId=secret_name)
                  secret = json.loads(response["SecretString"])
                  
                  return {
                      "statusCode": 200,
                      "body": json.dumps({
                          "message": "GCP Secret fetched successfully",
                          "secret": secret
                      })
                  }
              except Exception as e:
                  return {
                      "statusCode": 500,
                      "body": json.dumps({"error": str(e)})
                  }

  # API Gateway for Lambda Functions
  AWSSecretsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'AWSSecretsApi'

  AWSSecretsApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref AWSSecretsApi
      ParentId: !GetAtt [AWSSecretsApi, RootResourceId]
      PathPart: 'awssecrets'

  AWSSecretsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref AWSSecretsApi
      ResourceId: !Ref AWSSecretsApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt FetchAWSSecretsLambda.Arn

  AWSSecretsApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref AWSSecretsApi
      StageName: 'prod'
    DependsOn:
      - AWSSecretsApiMethod

  PermissionForApiToInvokeLambda:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FetchAWSSecretsLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${AWSSecretsApi}/*/GET/awssecrets'

  GCPSecretsApi:
    Type: AWS::ApiGateway::RestApi
    Properties:
      Name: 'GCPSecretsApi'

  GCPSecretsApiResource:
    Type: AWS::ApiGateway::Resource
    Properties:
      RestApiId: !Ref GCPSecretsApi
      ParentId: !GetAtt [GCPSecretsApi, RootResourceId]
      PathPart: 'gcpsecrets'

  GCPSecretsApiMethod:
    Type: AWS::ApiGateway::Method
    Properties:
      RestApiId: !Ref GCPSecretsApi
      ResourceId: !Ref GCPSecretsApiResource
      HttpMethod: GET
      AuthorizationType: NONE
      Integration:
        Type: AWS_PROXY
        IntegrationHttpMethod: POST
        Uri: !Sub
          - 'arn:aws:apigateway:${AWS::Region}:lambda:path/2015-03-31/functions/${LambdaArn}/invocations'
          - LambdaArn: !GetAtt FetchGCPSecretsLambda.Arn

  GCPSecretsApiDeployment:
    Type: AWS::ApiGateway::Deployment
    Properties:
      RestApiId: !Ref GCPSecretsApi
      StageName: 'prod'
    DependsOn:
      - GCPSecretsApiMethod

  PermissionForApiToInvokeLambdaGCP:
    Type: AWS::Lambda::Permission
    Properties:
      FunctionName: !Ref FetchGCPSecretsLambda
      Action: 'lambda:InvokeFunction'
      Principal: 'apigateway.amazonaws.com'
      SourceArn: !Sub 'arn:aws:execute-api:${AWS::Region}:${AWS::AccountId}:${GCPSecretsApi}/*/GET/gcpsecrets'

  # EC2 Instances
  BackendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      KeyName: !Ref KeyName
      ImageId: ami-0453ec754f44f9a4a  # Amazon Linux 2023 AMI
      SubnetId: !Ref PrivateSubnet
      PrivateIpAddress: 10.0.2.10
      SecurityGroupIds:
        - !Ref BackendSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub:
            - |
              #!/bin/bash
              sudo su
              yum update -y
              yum install -y gcc-c++ make
              curl -sL https://rpm.nodesource.com/setup_18.x | bash -
              yum install -y nodejs
              yum install -y git
              cd /home/ec2-user
              git clone https://github.com/risvarrt/TripMateAI.git
              cd TripMateAI/backend
              npm install
              # Set environment variables for Lambda URLs
              echo 'export LAMBDA_AWS_SECRET_URL="${AWSSecretsApiUrl}"' >> /etc/environment
              echo 'export LAMBDA_GCP_SECRET_URL="${GCPSecretsApiUrl}"' >> /etc/environment
              source /etc/environment
              # Start the backend application
              nohup node server.js > server.log 2>&1 &
            - AWSSecretsApiUrl: !Sub 'https://${AWSSecretsApi}.execute-api.${AWS::Region}.amazonaws.com/prod/awssecrets'
              GCPSecretsApiUrl: !Sub 'https://${GCPSecretsApi}.execute-api.${AWS::Region}.amazonaws.com/prod/gcpsecrets'

  FrontendInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: t2.small
      KeyName: !Ref KeyName
      ImageId: ami-0453ec754f44f9a4a # Amazon Linux 2023 AMI
      SubnetId: !Ref PublicSubnet
      SecurityGroupIds:
        - !Ref FrontendSecurityGroup
      UserData:
        Fn::Base64:
          Fn::Sub: 
            - |
              #!/bin/bash
              # Update system packages
              sudo yum update -y

              # Install necessary tools
              sudo yum install -y git gcc-c++ make
              curl -sL https://rpm.nodesource.com/setup_18.x | sudo bash -
              sudo yum install -y nodejs

              # Clone the frontend code
              cd /home/ec2-user
              git clone https://github.com/risvarrt/TripMateAI.git
              cd TripMateAI/frontend

              # Set environment variable for backend URL
              echo 'export VUE_APP_BACKEND_URL="http://${BackendPrivateIP}:3000"' >> ~/.bash_profile
              source ~/.bash_profile

              # Install dependencies and build the frontend
              npm install
              npm run build

              # Serve the production build on port 8080
              nohup npx serve -s dist --listen 8080 > /home/ec2-user/frontend.log 2>&1 &
            - BackendPrivateIP: !GetAtt BackendInstance.PrivateIpAddress

Outputs:
  FrontendPublicIP:
    Description: Public IP address of the frontend EC2 instance
    Value: !GetAtt FrontendInstance.PublicIp

  PrivateInstancePrivateIP:
    Description: The private IP of the backend (private) EC2 instance
    Value: !GetAtt BackendInstance.PrivateIpAddress

  AWSSecretsApiUrl:
    Description: URL for AWS Secrets API
    Value: !Sub 'https://${AWSSecretsApi}.execute-api.${AWS::Region}.amazonaws.com/prod/awssecrets'

  GCPSecretsApiUrl:
    Description: URL for GCP Secrets API
    Value: !Sub 'https://${GCPSecretsApi}.execute-api.${AWS::Region}.amazonaws.com/prod/gcpsecrets'

